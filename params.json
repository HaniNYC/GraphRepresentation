{"name":"Graph Representation","tagline":"A program to read a text file that contains a graph's elements as vertices and weighted edges and find the shortest path using Dijkstra's algorithm","body":"                                            \r\n                                          Graph Representation   \r\n\t\t\t\t\t\t\t\t   \r\n\t\t\t\t\t\t\t\t   \r\nDescription:\r\n----------- \r\nThe program will read a text file that contains a graph elements - vertices and weighted edges - as shown below. \r\n*******************************\r\n5                       <--- number of total vertices in the graph                  \r\n0 1 0.2 3 10.1 4 .5 -1  <-- a starting vertex(0) and its adjacent vertices followed by the edge weight ie: 0 ---0.2---> 1, 0 -----10.1---> 3  etc. \r\n1 0 1.5 -1\r\n2 1 100 3 50.2 -1\r\n3 -1\r\n4 1 10.5 2 13.9 -1\r\n*******************************\r\nAfter the graph is implemented using the adjacency list,the program will find all the shortest paths- using Dijkstra's algorithm- to every vertex in the graph\r\nwhen a starting vertex is giving. \r\nThe idea is to traverse all vertices of graph using BreadthFirst Search and use a Mutable Priority queue to store the vertices not yet included in shortest Path Tree\r\nor the vertices for which shortest distance is not finalized yet.Therefore, Mutable Priority Queue is used to store/get the minimum distance for vertices. \r\nNote :decreasekey() will be used to update the shortest distances for vertices.\r\n \r\n\r\nTime Complexity Analysis:\r\n-----------------------\r\nThe time complexity without using Mutable Priority Queue would be O(V^2) because there are two nested loops. But because Mutable Priority Queue was used , the inner loop  \r\nare executed O(V+E)  times only -Breadth First Search -. The  decreaseKey() operation takes O(LogV)time.So overall time complexity is \r\n O(E+V)*O(LogV) which is O((E+V)*LogV) = O(ELogV)\r\nFiles Included :\r\n---------------\r\n1- main.cpp                 - contains the graph adjacency list implementation and Dijkstra's algorithm for the shortest paths.\r\n2- BinaryHeap.h             - From the group's fourth assignment.\r\n3- QuadraticProbing.h       - From the group's fourth assignment. - One modification has been applied, the decreaskey() accepts doubles instead of integers.\r\n4- QuadraticProbing.cpp     - From the group's fourth assignment.\r\n5- fileReader.cpp           - Taken from Daniel's third assignment.Used for reading the file and checks for errors while reading.\r\n6- fileReader.hpp           - Taken from Daniel's third assignment\r\n7- vertex.hpp               - Contains vertex struct \r\n8- CMakeLists.txt\r\n9- make file\r\n10- ReadMe.txt\r\n \r\nImportant Functions :\r\n-------------------\r\n******************PUBLIC OPERATIONS*********************\r\n void insert( x )                     --> Insert x ( a node ) into the heap\r\n deleteMin( minItem )                 --> Remove (and optionally return) smallest item\r\n Comparable findMin( )                --> Return smallest item\r\n bool isEmpty( )                      --> Return true if empty; else false\r\n void makeEmpty( )                    --> Remove all items \r\n void increaseKey(delta,key)          --> Increases delta value then percolate down \r\n void decreaseKey(delta,key)          --> Decreases delta value then percolate up\r\n void removeKey(key)                  --> Assigning a minimum key value, Percolate up till root then delete\r\n void ds (int, vector<vertex>&)       --> The main function in the program, takes two arguments, the first is the starting vertex and the second is a vector representing the graph, \r\n                                         then applies Dijkstra's algorithm to all adjacent vertices and queue/ dequeue accordingly.If the current distance of a giving vertex is larger \r\n\t\t\t\t\t\t\t\t\t\t than the new distance to adjacent vertex + distance to starting vertex , then the vertex shortest distance is updated .\r\n void openFile(const string & file)   --> reads the input file( contains graph units) line by line into a string. - Found in fileReader-\r\n void removeSpecificChar(string&,char)-->  to remove specific chartype that maybe tainting the file.- Found in fileReader-\r\n void removeReturnCarraige(string&)   --> to remove any carrages found in file .- Found in fileReader-\r\n \r\n \r\nLanguage Used: c++ \r\n------------- \r\nCompiling Instructions:\r\n----------------------\r\n                        In eniac,  use cmake \"CMakeLists.txt\" then run make\r\nRunning Instructions: \r\n--------------------- \r\nFrom command line window   : after make file is run, type      findPaths <GRAPH_FILE> <STARTING_VERTEX> \r\nwhere Graph_File is the text file that contains all the graph'e element as shown above , and the STARTING_VERTEX is the first vertex in the graph\r\n                             \r\n\t\t\t\t\t\t   \r\nKnown Bugs:\r\n----------   None; please let us know if you find any issues. \r\nContacts:\r\n--------\r\nHani Aboudeshisha                          Hani.Aboudeshisha44@myhunter.cuny.edu\r\nGrigoriy Zhenein                           gregory.zhen@gmail.com \r\nDaniel Fialkouvskey                        falconoflegnds@gmail.com \r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}